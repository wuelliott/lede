#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

      - name: 增加第三方源码
        run: |
          cd package
          mkdir openwrt-packages
          cd openwrt-packages
          git clone https://github.com/jerrykuku/luci-app-argon-config.git # 第三方argon主题配置功能源码
          git clone https://github.com/xiaorouji/openwrt-passwall.git # 科学上网Passwall
          git clone https://github.com/vernesong/OpenClash.git # 科学上网OpenClash
          cd ..
          cd lean
          rm -rf luci-theme-argon
          git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git # 第三方argon主题源码

          df -h

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          #
          # 设置编译固件的机型
          #
          cat >> .config <<EOF
          # CONFIG_TARGET_x86=y
          # CONFIG_TARGET_x86_64=y
          # CONFIG_TARGET_x86_64_DEVICE_generic=y
          # CONFIG_TARGET_IMAGES_GZIP=y
          # CONFIG_TARGET_ROOTFS_TARGZ=y
          CONFIG_TARGET_ipq807x=y # 高通ipq807x
          CONFIG_TARGET_ipq807x_generic=y # Redmi AX6
          CONFIG_TARGET_ipq807x_generic_DEVICE_redmi_ax6=y # Redmi AX6
          # CONFIG_TARGET_ar71xx=y # 高通ar71xx
          # CONFIG_TARGET_ar71xx_nand=y # 网件WNDR4300
          # CONFIG_TARGET_ar71xx_nand_DEVICE_WNDR4300V1=y # 网件WNDR4300
          # CONFIG_TARGET_ar71xx_generic=y # GL-iNet6416
          # CONFIG_TARGET_ar71xx_generic_DEVICE_gl-inet-6416A-v1=y # GL-iNet6416
          # CONFIG_TARGET_ramips=y # 联发科
          # CONFIG_TARGET_ramips_mt7620=y # GL-MT300N
          # CONFIG_TARGET_ramips_mt7620_DEVICE_glinet_gl-mt300n=y # GL-MT300N
          # CONFIG_TARGET_ramips_mt7621=y # Xiaome R3G
          # CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_mir3g=y # Xiaome R3G
          # CONFIG_TARGET_ramips_mt76x8=y # GL-MT300Nv2
          # CONFIG_TARGET_ramips_mt76x8_DEVICE_glinet_gl-mt300n-v2=y # GL-MT300Nv2
          EOF

          #
          # 安装主题
          #
          cat >> .config <<EOF
          # CONFIG_PACKAGE_luci-theme-netgear=y # 网件主题
          CONFIG_PACKAGE_luci-theme-opentomcat=y # opentomcat主题
          CONFIG_PACKAGE_luci-theme-argon=y # 第三方argon主题
          CONFIG_PACKAGE_luci-app-argon-config=y # 第三方argon主题配置功能
          # CONFIG_PACKAGE_luci-theme-edge=y # edge主题
          EOF

          #
          # 安装软件
          #
          cat >> .config <<EOF
          CONFIG_PACKAGE_curl=y # curl下载工具
          CONFIG_PACKAGE_automount=n # 自动挂载U盘
          CONFIG_PACKAGE_autosamba=n # SMB服务
          CONFIG_PACKAGE_luci-app-commands=n # 自定义命令
          # CONFIG_PACKAGE_luci-app-diskman=y # 磁盘管理工具
          # CONFIG_PACKAGE_luci-app-usb-printer=y # USB打印服务
          # CONFIG_PACKAGE_luci-app-hd-idle=y # 硬盘休眠
          CONFIG_PACKAGE_luci-proto-relay=y # 中继桥
          CONFIG_PACKAGE_luci-app-ddns=y # 动态DDNS域名
          CONFIG_PACKAGE_luci-app-zerotier=y # ZeroTire虚拟内网
          CONFIG_PACKAGE_openssh-sftp-server=y # SSH服务
          CONFIG_PACKAGE_nano=y # Nano文本编辑器
          CONFIG_PACKAGE_luci-app-adbyby-plus=y # 广告屏蔽
          CONFIG_PACKAGE_luci-app-unblockmusic=n # 不安装解锁网易云灰音乐
          # CONFIG_UnblockNeteaseMusic_Go=y
          # CONFIG_UnblockNeteaseMusic_NodeJS=y
          # CONFIG_PACKAGE_luci-app-uugamebooster=n # UU游戏加速器
          # CONFIG_PACKAGE_luci-app-xlnetacc=n # 迅雷快鸟
          CONFIG_PACKAGE_luci-app-accesscontrol=y # 访问时间控制
          # CONFIG_PACKAGE_luci-app-airplay2=y
          CONFIG_PACKAGE_htop=y # 交互进程浏览器
          # CONFIG_PACKAGE_netdata=y # 实时性能监控工具
          # CONFIG_PACKAGE_luci-app-netdata=y # 实时性能监控
          CONFIG_PACKAGE_luci-app-nlbwmon=y # 网络带宽监视器
          CONFIG_PACKAGE_luci-app-jd-dailybonus=y # 京东每日签到
          # CONFIG_PACKAGE_luci-app-ps3netsrv=y # PS3网盘服务
          CONFIG_PACKAGE_luci-app-frpc=y # 内网穿透
          # CONFIG_PACKAGE_luci-app-smartinfo=y # 硬盘信息
          # CONFIG_PACKAGE_luci-app-mwan3helper=n # 多线多拨助手
          # CONFIG_PACKAGE_luci-app-transmission=y # BT、PT下载工具
          # CONFIG_PACKAGE_luci-app-qbittorrent=y # BT、PT下载工具
          # CONFIG_PACKAGE_luci-app-qos=y # 网络服务质量
          # CONFIG_PACKAGE_luci-app-mtwifi=y # MTK无线闭源驱动（小米R3G默认开启，GL-MT300NV2不支持）
          CONFIG_PACKAGE_luci-app-easymesh=y # 简单Mesh
          CONFIG_PACKAGE_luci-app-ssr-plus=y # 酸酸乳Plus
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y # SS代理
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust=n # SS代理 Rust 
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y # Xray代理
          # CONFIG_PACKAGE_luci-app-passwall=y # 帕斯沃
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks=y # SS代理
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Server=n # SS服务端
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR=y # SSR代理
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Server=n # SSR服务端
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y # Xray代理
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=n # Trojan代理
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_GO=n # Trojan代理
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=n # Brook代理
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=n # NaiveProxy代理
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_kcptun=n # kcptun代理
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_haproxy=y # HAProxy负载均衡
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=n # 防污染DNS服务
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_dns2socks=y # DNS服务器
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_v2ray-plugin=y # SS V2ray插件
          # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_simple-obfs=y # 简单混淆工具
          # CONFIG_PACKAGE_luci-app-openclash=y # Clash代理
          
          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
